import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys
import re
import os
import xbmcgui
import xbmc
import HTMLParser
import xbmcplugin
import xbmcaddon
import urllib
import urllib2
import sqlite3
import base64
import zlib
from urllib2 import HTTPError
from urllib2 import URLError
import traceback
import unicodedata
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
__settings__ = xbmcaddon . Addon ( id = "plugin.video.palantir" )
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
if 85 - 85: oo
if 70 - 70: iIi11 + Ii1I / I1IiI1III11i + ooOooO0OOO % IiII1i1I / iIi11
def oo0o ( text ) :
 OOO0O00O0 = '7Se10gAIe-T0_a'
 if 17 - 17: IIoooO0ooO0oo
 OOO0O00O0 = base64 . urlsafe_b64decode ( 'N1NlMTBnQUllLVQwX2E=' )
 try :
  o0ooo = base64 . urlsafe_b64decode ( str ( text ) )
  II1111I1 = [ ]
  for O00Ooo0o0OO in xrange ( len ( o0ooo ) ) :
   I1iI1iiiIiI1 = OOO0O00O0 [ O00Ooo0o0OO % len ( OOO0O00O0 ) ]
   OO0O0 = chr ( ord ( o0ooo [ O00Ooo0o0OO ] ) - ord ( I1iI1iiiIiI1 ) % 256 )
   II1111I1 . append ( OO0O0 )
  ii1i1ii1I = '' . join ( II1111I1 )
  return ii1i1ii1I
 except TypeError , o0o0000O0 :
  return text
  if 70 - 70: i1iI1 % Ii1I
  if 64 - 64: oo . OOoOoO0o0o0OO . OOO - ii1I1ii1IiIi1 . oooOoO * Ii
  if 63 - 63: OOoOoO0o0o0OO . iiIIi1i1Iii / IIoooO0ooO0oo . Ii / IIoooO0ooO0oo % ii1I1ii1IiIi1
  if 3 - 3: iIi11 % ooOooO0OOO * IiII1i1I / OOO * IiII1i1I
  if 51 - 51: iiIIi1i1Iii . IiII1i1I % OOoOoO0o0o0OO
  if 31 - 31: i1iI1 / i1iI1 % II * IiII1i1I - II
def OOo0000oO ( ) :
 return 'eJzLKCkpsNLXL8-sSixKSU4syU_M0UstrgRi_YDEnMS8kswiAO2-DU0='
 if 48 - 48: iiIIi1i1Iii % OOO
 if 52 - 52: II
def I111I11I11111 ( bas ) :
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 I11iIiIIi = ''
 if 28 - 28: IIII
 try :
  if 56 - 56: iiIIi1i1Iii + IIII . IiII1i1I - ooOooO0OOO + oo / IiII1IiI
  OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IGxvYyBmcm9tIHZlcnNpb24=' ) )
  oO = OO0o . fetchone ( )
  I11iIiIIi = oO [ 0 ]
  IIIii1Ii . close ( )
 except :
  try :
   IIIii1Ii . close ( )
  except :
   pass
   if 40 - 40: ii1I1ii1IiIi1 * oo / I1
  try :
   os . remove ( bas )
  except :
   pass
 return str ( I11iIiIIi . strip ( ) )
 if 28 - 28: iIi11 - o00oO0oo0O0O0 / ooOooO0OOO + IiII1i1I / Ii
 if 41 - 41: i1iI1 - OOO % I1IiI1III11i - IIoooO0ooO0oo + I1IiI1III11i
def I1iiI1I ( url , post = None ) :
 if 12 - 12: ii1I1ii1IiIi1
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( url , post , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 return iiII
 if 51 - 51: IIII / iiIIi1i1Iii
 if 56 - 56: i1iI1
def i1I1IIIII ( bd , id , val , type ) :
 try :
  I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( bd ) ) )
  if 92 - 92: I1 - I1IiI1III11i / oo . OOoOoO0o0o0OO / II - oOO
  ooO000oOo00 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3F1YWxpdHkucGhwP3R5cGU9JXNpZD0lcyZ2YWw9JXM=' ) ) % (
 I11iIiIIi , type , id , str ( val ) )
  I1iiI1I ( ooO000oOo00 )
  oO00ooOoOOo0o = id . split ( '-' )
  if 9 - 9: iiIIi1i1Iii % OOO * oOO + iiIIi1i1Iii . IiII1IiI
  IIIii1Ii = sqlite3 . connect ( bd )
  OO0o = IIIii1Ii . cursor ( )
  if type == 'series' :
   if oO00ooOoOOo0o [ 2 ] :
    if 100 - 100: oOO . oo / Ii * IIII
    OO0o . execute ( base64 . urlsafe_b64decode (
 'VVBEQVRFIGNhcGl0dWxvcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8gQU5EIGNhcGl0dWxvX2lkID0gPw==' ) ,
 ( str ( val ) , int ( oO00ooOoOOo0o [ 0 ] ) , int ( oO00ooOoOOo0o [ 1 ] ) , oO00ooOoOOo0o [ 2 ] , ) )
   elif oO00ooOoOOo0o [ 1 ] :
    if 13 - 13: oOO + oOO + IIII . II - IIoooO0ooO0oo * ooOooO0OOO
    OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBxdWFsaXR5PT8gV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) ,
 ( str ( val ) , int ( oO00ooOoOOo0o [ 0 ] ) , int ( oO00ooOoOOo0o [ 1 ] ) , ) )
   elif oO00ooOoOOo0o [ 0 ] :
    if 35 - 35: oOO
    OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPw==' ) ,
 ( str ( val ) , int ( oO00ooOoOOo0o [ 0 ] ) , ) )
  else :
   if 92 - 92: i1iI1
   OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHBlbGlzIFNFVCBxdWFsaXR5PT8gV0hFUkUgcGVsaV9pZCA9ID8=' ) ,
 ( str ( val ) , int ( oO00ooOoOOo0o [ 0 ] ) , ) )
  IIIii1Ii . commit ( )
  IIIii1Ii . close ( )
 except Exception as o0o0000O0 :
  pass
  if 87 - 87: oooOoO / I1 % iiIIi1i1Iii
  if 49 - 49: OOO * Ii1I . OOO
def ooO0O0O ( link , bd , id , temp_id = 0 ) :
 iiIii1IIi1I = [ ]
 try :
  iIiiIi1i1i1i1 = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
  ooO000oOo00 = oo0o ( str ( link ) )
  iIiiIi1i1i1i1 [ 'referer' ] = '/' . join ( ooO000oOo00 . split ( '/' ) [ : 4 ] )
  iIiiIi1i1i1i1 [ 'connection' ] = 'keep-alive'
  Ii11 = urllib2 . Request ( ooO000oOo00 , None , iIiiIi1i1i1i1 )
  I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
  iiII = I11Iii11i1Ii1 . read ( )
  I11Iii11i1Ii1 . close ( )
  IIi11Ii1 = '/' . join ( ooO000oOo00 . split ( '/' ) [ 0 : 5 ] )
  O0Oo0oOO = re . findall ( 'class="list_row".*data-file-id="(.*?)"' , iiII )
  if 48 - 48: IIII * iIi11 + I1IiI1III11i
  OOooO0O = re . findall ( 'class="name">\s*<a.*data-action-before="preview".*>(.*?)</a>' , iiII )
  o0o = HTMLParser . HTMLParser ( )
  if 7 - 7: o00oO0oo0O0O0 . oooOoO % Ii
  if len ( O0Oo0oOO ) > 0 :
   try :
    IIIii1Ii = sqlite3 . connect ( bd )
    OO0o = IIIii1Ii . cursor ( )
    if temp_id > 0 :
     if 32 - 32: ii1I1ii1IiIi1 + I1 - IiII1i1I % Ii1I + oOO
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzX3RlbXAgV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) , ( id , temp_id , ) )
    else :
     if 1 - 1: OOoOoO0o0o0OO % I1IiI1III11i
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzIFdIRVJFIHNlcmllX2lkID0gPw==' ) , ( id , ) )
    oO = OO0o . fetchone ( )
    IIIii1Ii . close ( )
    if oO [ 0 ] < len ( O0Oo0oOO ) :
     I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( bd ) ) )
     if temp_id > 0 :
      if 75 - 75: IiII1IiI
      ooO000oOo00 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdGVtcD0lcyZ2YWw9JXM=' ) ) % (
 I11iIiIIi , id , temp_id , str ( len ( O0Oo0oOO ) ) )
     else :
      if 36 - 36: oooOoO % I1IiI1III11i
      ooO000oOo00 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdmFsPSVz' ) ) % (
 I11iIiIIi , id , str ( len ( O0Oo0oOO ) ) )
     I1iiI1I ( ooO000oOo00 )
     if 38 - 38: OOO * Ii
     IIIii1Ii = sqlite3 . connect ( bd )
     OO0o = IIIii1Ii . cursor ( )
     if temp_id > 0 :
      if 6 - 6: oo % I1IiI1III11i . iIi11 + oooOoO . oo % ii1I1ii1IiIi1
      OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBuX2VwaT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8=' ) , ( len ( O0Oo0oOO ) , id , temp_id , ) )
     else :
      if 17 - 17: OOoOoO0o0o0OO - IIoooO0ooO0oo + iiIIi1i1Iii
      OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgbl9lcGk9PyBXSEVSRSBzZXJpZV9pZCA9ID8=' ) , ( len ( O0Oo0oOO ) , id , ) )
     IIIii1Ii . commit ( )
     IIIii1Ii . close ( )
   except Exception as o0o0000O0 :
    pass
  for i1II1I in xrange ( 0 , len ( O0Oo0oOO ) ) :
   iiIii1IIi1I . append ( ( o0o . unescape ( OOooO0O [ i1II1I ] . decode ( 'utf-8' ) ) , oOOOOo ( '%s/p,%s,list,1,3.avi' % ( IIi11Ii1 , O0Oo0oOO [ i1II1I ] ) ) ) )
 except ( HTTPError , URLError ) as o0o0000O0 :
  ooO = xbmcgui . ListItem ( 'Enlace borrado' , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , False , ooO )
  Ii1iI = xbmcgui . Dialog ( )
  Ii1iI . notification ( 'Palantir' , 'Enlace borrado' , xbmcgui . NOTIFICATION_WARNING , 5000 )
 return iiIii1IIi1I
 if 49 - 49: oo * iIi11 % II + I1
def Ii1IIiI11iI1 ( url , decode = True ) :
 if decode :
  url = oo0o ( url )
  if 82 - 82: Ii1I * i1iI1 - oo . iiIIi1i1Iii . I1IiI1III11i % o00oO0oo0O0O0
 if base64 . urlsafe_b64decode ( 'ZGlza29rb3NtaWtv' ) in url :
  return base64 . urlsafe_b64decode ( 'ZGs=' )
  if 76 - 76: IiII1i1I % iIi11 + OOO + ii1I1ii1IiIi1
 elif base64 . urlsafe_b64decode ( 'Y29waWFwb3A=' ) in url :
  return base64 . urlsafe_b64decode ( 'Y3A=' )
  if 67 - 67: II
 elif base64 . urlsafe_b64decode ( 'c3RyZWFtY2xvdWQ=' ) in url :
  if 24 - 24: II / oooOoO - OOoOoO0o0o0OO - ii1I1ii1IiIi1
  return base64 . urlsafe_b64decode ( 'dWs=' )
  if 40 - 40: II - IIoooO0ooO0oo / iIi11 * II . Ii
 elif base64 . urlsafe_b64decode ( 'cGFydGFnb3Jh' ) in url :
  return base64 . urlsafe_b64decode ( 'cHQ=' )
  if 78 - 78: Ii1I + OOO - oOO
 elif base64 . urlsafe_b64decode ( 'ay1iYWdp' ) in url or base64 . urlsafe_b64decode ( 'a2JhZ2k=' ) in url :
  return base64 . urlsafe_b64decode ( 'a2I=' )
  if 32 - 32: Ii . iiIIi1i1Iii / oooOoO % IiII1i1I / I1 * o00oO0oo0O0O0
 elif base64 . urlsafe_b64decode ( 'cnR2ZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'cmU=' )
  if 53 - 53: OOO * ooOooO0OOO % iIi11
 elif base64 . urlsafe_b64decode ( 'eW91dHViZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'eXQ=' )
  if 15 - 15: IiII1IiI + IIII * iIi11 . II
 elif base64 . urlsafe_b64decode ( 'aHR0cHM6Ly9nbG9yaWEudHYv' ) in url :
  return base64 . urlsafe_b64decode ( 'Z2xvcmlh' )
  if 6 - 6: I1
 elif base64 . urlsafe_b64decode ( 'Z2xvcmlhLnR2' ) in url :
  return base64 . urlsafe_b64decode ( 'c3RhbmRhcmQ=' )
  if 94 - 94: IIoooO0ooO0oo + oooOoO
 elif base64 . urlsafe_b64decode ( 'cGVsaXNpcGFk' ) in url :
  return base64 . urlsafe_b64decode ( 'dGs=' )
  if 56 - 56: ooOooO0OOO % IiII1IiI . II / OOO
 else :
  return base64 . urlsafe_b64decode ( 'dWs=' )
  if 26 - 26: ooOooO0OOO . IIII % iIi11
def I1IiI1ii1i1i1 ( urls , decode = True ) :
 ooO000oOo00 = urls . split ( ' ' ) [ 0 ]
 if decode :
  ooO000oOo00 = oo0o ( ooO000oOo00 )
  if 23 - 23: II / oOO / IiII1IiI - IiII1i1I - oo % oo
 if base64 . urlsafe_b64decode ( 'ZGlza29rb3NtaWtv' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'ZGlza29rb3NtaWtv' )
  if 94 - 94: IIoooO0ooO0oo % o00oO0oo0O0O0 * ii1I1ii1IiIi1 . oooOoO / iIi11 * OOoOoO0o0o0OO
 elif base64 . urlsafe_b64decode ( 'Y29waWFwb3A=' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'Y29waWFwb3A=' )
  if 61 - 61: o00oO0oo0O0O0 * iIi11 + oo / oooOoO
 elif base64 . urlsafe_b64decode ( 'c3RyZWFtY2xvdWQ=' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'c3RyZWFtY2xvdWQ=' )
  if 39 - 39: i1iI1 % oOO . o00oO0oo0O0O0 - oo * IiII1i1I
 elif base64 . urlsafe_b64decode ( 'cGFydGFnb3Jh' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'cGFydGFnb3Jh' )
  if 27 - 27: Ii
 elif base64 . urlsafe_b64decode ( 'ay1iYWdp' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'ay1iYWdp' )
  if 94 - 94: ooOooO0OOO - oooOoO
 elif base64 . urlsafe_b64decode ( 'cnR2ZQ==' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'cnR2ZQ=' )
  if 70 - 70: iIi11 . iiIIi1i1Iii * IiII1i1I
 elif base64 . urlsafe_b64decode ( 'eW91dHViZQ==' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'eW91dHViZQ=' )
  if 64 - 64: IIoooO0ooO0oo % II
 elif base64 . urlsafe_b64decode ( 'Z2xvcmlhLnR2' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'Z2xvcmlhLnR2' )
  if 86 - 86: iIi11 / II * Ii * II + oooOoO - IiII1i1I
 elif base64 . urlsafe_b64decode ( 'c3RyZWFtYW5nbw==' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'c3RyZWFtYW5nbw==' )
  if 95 - 95: II + oo / IIII + Ii1I
 elif base64 . urlsafe_b64decode ( 'dmlkb3ph' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'dmlkb3ph' )
  if 85 - 85: ooOooO0OOO . II * IIoooO0ooO0oo % II % Ii - oo
 elif base64 . urlsafe_b64decode ( 'ZGFpbHltb3Rpb24=' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'ZGFpbHltb3Rpb24=' )
  if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
 else :
  O0oo00 = ooO000oOo00 . split ( '/' )
  if len ( O0oo00 ) > 2 :
   O0oo00 = ooO000oOo00 . split ( '/' ) [ 2 ] . split ( '.' )
   if 80 - 80: IiII1IiI * iiIIi1i1Iii / oOO / Ii1I / OOO + o00oO0oo0O0O0
   if O0oo00 [ 0 ] == base64 . urlsafe_b64decode ( 'd3d3' ) :
    return O0oo00 [ 1 ]
   else :
    if 81 - 81: II - ii1I1ii1IiIi1 / iIi11 + oooOoO
    return O0oo00 [ 0 ]
  else :
   if 51 - 51: IiII1IiI + II + IiII1i1I . II
   return ooO000oOo00
   if 86 - 86: OOO / IiII1IiI * IiII1IiI * o00oO0oo0O0O0
def Oo00OooO ( server , link ) :
 ii = link . split ( '/' )
 oOiii = '/' . join ( ii [ 3 : 4 ] )
 iIIiiIIIIi = '/' . join ( ii [ 4 : 5 ] )
 link = ii [ 5 ] . split ( ',' ) [ 1 ]
 OOoOo0OO = link
 oOoOoOo = '%s/-%s/p,%s,list,1,3.avi' % ( oOiii , iIIiiIIIIi , link )
 ooO000oOo00 = '%s/%s/' % ( server , oOiii )
 iIiiIi1i1i1i1 = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 iiIi1I1ii = '%s/%s' % ( server , oOoOoOo )
 iIiiIi1i1i1i1 [ 'referer' ] = ooO000oOo00
 iIiiIi1i1i1i1 [ 'connection' ] = 'keep-alive'
 Ii11 = urllib2 . Request ( iiIi1I1ii , None , iIiiIi1i1i1i1 )
 I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 I11Iii11i1Ii1 . close ( )
 Ii1iIi1 = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % link , iiII )
 i11 = 0
 try :
  Ii1iIi1 = Ii1iIi1 [ 0 ]
 except :
  i11 = 1
  if 94 - 94: IiII1IiI % I1IiI1III11i * oo
 if i11 == 0 :
  iII = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( server , OOoOo0OO )
  oOO0oooo = 'fileId=%s&__RequestVerificationToken=%s' % ( OOoOo0OO , Ii1iIi1 )
  iIiiIi1i1i1i1 [ 'referer' ] = iiIi1I1ii
  iIiiIi1i1i1i1 [ 'connection' ] = 'keep-alive'
  Ii11 = urllib2 . Request ( iII , oOO0oooo , iIiiIi1i1i1i1 )
  I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
  iiII = I11Iii11i1Ii1 . read ( )
  I11Iii11i1Ii1 . close ( )
  link = re . findall ( 'DownloadUrl":"([^"]+)' , iiII )
  iI = link [ 0 ]
 else :
  iI = ''
 return iI . strip ( )
 if 7 - 7: I1IiI1III11i / I1IiI1III11i
 if 82 - 82: IiII1IiI . II . ooOooO0OOO - Ii1I
 if 27 - 27: OOO / ii1I1ii1IiIi1 + IIoooO0ooO0oo - ooOooO0OOO % oOO
def oOOOOo ( string ) :
 OOO0O00O0 = '7Se10gAIe-T0_a'
 II1111I1 = [ ]
 for O00Ooo0o0OO in xrange ( len ( string ) ) :
  I1iI1iiiIiI1 = OOO0O00O0 [ O00Ooo0o0OO % len ( OOO0O00O0 ) ]
  OO0O0 = chr ( ord ( string [ O00Ooo0o0OO ] ) + ord ( I1iI1iiiIiI1 ) % 256 )
  II1111I1 . append ( OO0O0 )
 ii1i1ii1I = '' . join ( II1111I1 )
 return base64 . urlsafe_b64encode ( ii1i1ii1I )
 if 68 - 68: oooOoO
 if 77 - 77: OOoOoO0o0o0OO * ii1I1ii1IiIi1
def oo0o00ooO ( base , server ) :
 if server == 'kbagi' :
  server = 'k-bagi.com'
 import time
 from random import randint
 oO0oOoOOo0OO = str ( int ( time . time ( ) * 1000 ) )
 O0o = 'http://%s/action/Account/Login?returnUrl=%s&%s' % ( server , '%2F' , oO0oOoOOo0OO )
 oOO0oooo = None
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( O0o , oOO0oooo , oOOO00OoOo )
 if 17 - 17: Ii % ii1I1ii1IiIi1 * I1 % Ii * o00oO0oo0O0O0 + iiIIi1i1Iii
 if 49 - 49: oOO + o00oO0oo0O0O0 - I1IiI1III11i
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 I11I1IiiI1IIi = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 O0Oo0oOO = re . search ( '".*?__RequestVerificationToken.*?value="(.*?)"' , iiII )
 Ii1iIi1 = O0Oo0oOO . group ( 1 )
 iII = 'http://%s/action/Account/Login' % server
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Accept' ] = '*/*'
 oOOO00OoOo [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 oOOO00OoOo [ 'Accept-Encoding' ] = 'gzip, deflate'
 oOOO00OoOo [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 oOOO00OoOo [ 'X-Requested-With' ] = 'XMLHttpRequest'
 oOOO00OoOo [ 'Referer' ] = O0o
 oOOO00OoOo [ 'Cookie' ] = I11I1IiiI1IIi
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOOoOO = iII1iIIiIi11I ( base , server )
 if 40 - 40: IIII + oo - oooOoO . OOO . OOO . OOoOoO0o0o0OO
 oOO0oooo = '__RequestVerificationToken=%s&UserName=%s&Password=%s' % ( Ii1iIi1 , oOOoOO [ 0 ] . encode ( 'utf-8' ) , oOOoOO [ 1 ] . encode ( 'utf-8' ) )
 if 58 - 58: IiII1IiI * OOoOoO0o0o0OO
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iII , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 if 58 - 58: II % I1IiI1III11i * OOoOoO0o0o0OO * oooOoO . iIi11
 iiII = I11Iii11i1Ii1 . read ( )
 if 62 - 62: Ii - II - i1iI1
 return 'Type":"Redirect' in iiII . replace ( ' ' , '' )
 if 41 - 41: I1IiI1III11i + oooOoO . o00oO0oo0O0O0 % iIi11
 if 100 - 100: i1iI1 . Ii - OOoOoO0o0o0OO - OOO - oooOoO
def I1Ii1IiIIiI ( server , link , base ) :
 ii = link . split ( '/' )
 oOiii = '/' . join ( ii [ 3 : 4 ] )
 iIIiiIIIIi = '/' . join ( ii [ 4 : 5 ] )
 link = ii [ 5 ] . split ( ',' ) [ 1 ]
 O0o = 'http://%s/%s/%s/p,%s,list,1,2.avi' % ( server , oOiii , iIIiiIIIIi , link )
 oOO0oooo = None
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( O0o , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 I11I1IiiI1IIi = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 O0Oo0oOO = re . search ( 'action="(\\/action\\/DownloadFile\\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , iiII )
 oOOoo0 = 'http://%s%s' % ( server , O0Oo0oOO . group ( 1 ) . replace ( '&amp;' , '&' ) )
 Ii1iIi1 = O0Oo0oOO . group ( 2 )
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = O0o
 oOOO00OoOo [ 'Cookie' ] = I11I1IiiI1IIi
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOO0oooo = 'fileId=%s&__RequestVerificationToken=%s' % ( link , Ii1iIi1 )
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 if 21 - 21: oOO
 Ii11 = oo0O0 ( oOOoo0 , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 import time
 oO0oOoOOo0OO = str ( int ( time . time ( ) ) ) + '404'
 iiIi1I1ii = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , oO0oOoOOo0OO )
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = O0o
 oOOO00OoOo [ 'Cookie' ] = I11I1IiiI1IIi
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOO0oooo = None
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iiIi1I1ii , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 I1II1IIiii = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 ooooOOo00 = I11I1IiiI1IIi . split ( ';' )
 i1II11I111 = I1II1IIiii . split ( ';' )
 for i1iI11IiI1iI1 in i1II11I111 :
  if i1iI11IiI1iI1 not in ooooOOo00 :
   ooooOOo00 . append ( i1iI11IiI1iI1 )
   if 77 - 77: oooOoO / Ii1I
 i1II11I111 = [ ]
 for i1iI11IiI1iI1 in ooooOOo00 :
  if 'path=/' not in i1iI11IiI1iI1 and 'HttpOnly' not in i1iI11IiI1iI1 :
   i1II11I111 . append ( i1iI11IiI1iI1 )
   if 30 - 30: IIoooO0ooO0oo - ii1I1ii1IiIi1 . OOO / i1iI1 - II
 I11I1IiiI1IIi = '; ' . join ( i1II11I111 ) . replace ( '  ' , ' ' )
 iII = 'http://%s/action/Account/Login' % server
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Accept' ] = '*/*'
 oOOO00OoOo [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 oOOO00OoOo [ 'Accept-Encoding' ] = 'gzip, deflate'
 oOOO00OoOo [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 oOOO00OoOo [ 'X-Requested-With' ] = 'XMLHttpRequest'
 oOOO00OoOo [ 'Referer' ] = O0o
 oOOO00OoOo [ 'Cookie' ] = I11I1IiiI1IIi
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOOoOO = iII1iIIiIi11I ( base , server )
 oOO0oooo = '__RequestVerificationToken=%s&UserName=%s&Password=%s' % ( Ii1iIi1 , oOOoOO [ 0 ] . encode ( 'utf-8' ) , oOOoOO [ 1 ] . encode ( 'utf-8' ) )
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iII , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 try :
  I1II1IIiii = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 except :
  return oOOoOO [ 0 ] . encode ( 'utf-8' ) + '##NoLogin'
 iiII = I11Iii11i1Ii1 . read ( )
 ooooOOo00 = I11I1IiiI1IIi . split ( ';' )
 i1II11I111 = I1II1IIiii . split ( ';' )
 for i1iI11IiI1iI1 in i1II11I111 :
  if i1iI11IiI1iI1 not in ooooOOo00 :
   ooooOOo00 . append ( i1iI11IiI1iI1 )
   if 88 - 88: Ii1I * oo * IIII + oo
 i1II11I111 = [ ]
 for i1iI11IiI1iI1 in ooooOOo00 :
  if 'path=/' not in i1iI11IiI1iI1 and 'HttpOnly' not in i1iI11IiI1iI1 :
   i1II11I111 . append ( i1iI11IiI1iI1 )
   if 42 - 42: oOO . ooOooO0OOO % IIII + IiII1i1I
 I11I1IiiI1IIi = '; ' . join ( i1II11I111 ) . replace ( '  ' , ' ' )
 I1II1IIiii = ''
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = O0o
 oOOO00OoOo [ 'Cookie' ] = I11I1IiiI1IIi
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOO0oooo = 'fileId=%s&__RequestVerificationToken=%s' % ( link , Ii1iIi1 )
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( oOOoo0 , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 O0Oo0oOO = re . search ( 'DownloadUrl":"(.*?)"' , iiII )
 return O0Oo0oOO . group ( 1 )
 if 57 - 57: OOO * oooOoO * I1 . I1IiI1III11i - Ii
 if 6 - 6: Ii1I - IiII1i1I % I1IiI1III11i - i1iI1 / i1iI1 . iiIIi1i1Iii
def Oo0o0 ( link ) :
 oOOO0OoO0 = re . findall ( 'list=(.*?)(?:&|\s|$)+' , oo0o ( link ) , flags = re . DOTALL )
 iii11III11 = [ ]
 if len ( oOOO0OoO0 ) > 0 :
  for O00Ooo0o0OO in oOOO0OoO0 :
   iii11III11 . append ( 'plugin://plugin.video.youtube/playlist/%s/' % str ( oOOO0OoO0 [ 0 ] ) )
  return iii11III11
 else :
  return None
  if 50 - 50: Ii1I . OOoOoO0o0o0OO % OOO . iIi11 . iiIIi1i1Iii
def OOoo ( link ) :
 iiII = I1iiI1I ( link )
 if 24 - 24: ooOooO0OOO % ii1I1ii1IiIi1 * I1IiI1III11i % II / oo / ooOooO0OOO
 oOOO0OoO0 = re . search ( '/streaming/.*?m3u8' , iiII ) . group ( 0 )
 if oOOO0OoO0 :
  if 57 - 57: IIII . II
  return 'https://gloria.tv' + oOOO0OoO0
 else :
  return None
  if 53 - 53: IIII + oo * i1iI1 . oOO - IiII1IiI . IIII
def Oo00o000O ( tit , videoUrl ) :
 Oo0Oo0 = int ( sys . argv [ 1 ] )
 ooO = xbmcgui . ListItem ( path = videoUrl )
 ooO . setInfo ( 'video' , { 'title' : tit } )
 xbmcplugin . setResolvedUrl ( Oo0Oo0 , True , ooO )
 if 42 - 42: iiIIi1i1Iii % o00oO0oo0O0O0 - OOoOoO0o0o0OO
def iii ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 36 - 36: oooOoO
 if 56 - 56: oooOoO * oOO - ooOooO0OOO * OOoOoO0o0o0OO / iIi11 . i1iI1
def Iiooo ( tit , videoUrl ) :
 tit = iii ( unicode ( tit . decode ( 'utf-8' ) ) )
 if 24 - 24: ii1I1ii1IiIi1 * IIoooO0ooO0oo . I1 + II - ii1I1ii1IiIi1 . Ii
 oOO0Oo00o0 , i11o0 = os . path . splitext ( videoUrl )
 I1iI1I1iII1II , oo0ooOoO0ooOo = os . path . splitext ( tit )
 if 89 - 89: OOO . Ii
 if 8 - 8: ii1I1ii1IiIi1 . oooOoO - OOO / oo / oo % iiIIi1i1Iii
 if not i11o0 and not oo0ooOoO0ooOo :
  i11o0 = '.avi'
  if 4 - 4: iiIIi1i1Iii . IiII1IiI + Ii - OOO
 if not tit . endswith ( i11o0 ) :
  tit = tit + i11o0
  if 34 - 34: iIi11 + OOoOoO0o0o0OO + ii1I1ii1IiIi1 + oooOoO * ooOooO0OOO
  if 36 - 36: IIoooO0ooO0oo . oooOoO - i1iI1
 import xbmcaddon
 try :
  import SimpleDownloader as downloader
  downloader = downloader . SimpleDownloader ( )
  I1iI = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
  I11 = { "url" : videoUrl . strip ( ) , "download_path" : I1iI , "filename" : tit }
  downloader . download ( tit , I11 )
  Ii1iI = xbmcgui . Dialog ( )
  Ii1iI . notification ( 'Palantir' , 'Iniciando Descarga...' , xbmcgui . NOTIFICATION_INFO , 3000 )
 except :
  traceback . print_exc ( file = sys . stdout )
  Oo0oOoOOO00o = 'Addon Simple Downloader no encontrado, por eso no se puede descargar'
  ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , False , ooO )
  Ii1iI = xbmcgui . Dialog ( )
  Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
  if 62 - 62: I1 + iiIIi1i1Iii / I1IiI1III11i
def IiIiIi1iI1 ( ser , titulo , base , id , type , action , params ) :
 Oo0Oo0 = int ( sys . argv [ 1 ] )
 if action == 'play' :
  action = Oo00o000O
  try :
   I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( base ) ) )
   if 53 - 53: ooOooO0OOO / ii1I1ii1IiIi1 / o00oO0oo0O0O0 - OOO * I1IiI1III11i + IiII1i1I
   ooO000oOo00 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3ZpZXdzLnBocD9pZD0lcyZ0eXBlPSVz' ) ) % ( I11iIiIIi , id , type )
   I1iiI1I ( ooO000oOo00 )
   if 90 - 90: ooOooO0OOO + IIoooO0ooO0oo / oooOoO + OOO * iIi11 % iiIIi1i1Iii
   IIIii1Ii = sqlite3 . connect ( base )
   OO0o = IIIii1Ii . cursor ( )
   if type == 'series' :
    if 97 - 97: OOoOoO0o0o0OO * II . I1 + Ii1I
    OO0o . execute (
 base64 . urlsafe_b64decode ( 'dXBkYXRlIHNlcmllcyBzZXQgdmlld3M9dmlld3MrMSB3aGVyZSBzZXJpZV9pZCA9ID8=' ) ,
 ( id , ) )
   else :
    if 82 - 82: II + ii1I1ii1IiIi1 % iiIIi1i1Iii . II
    OO0o . execute (
 base64 . urlsafe_b64decode ( 'dXBkYXRlIHBlbGlzIHNldCB2aWV3cz12aWV3cysxIHdoZXJlIHBlbGlfaWQgPSA_' ) , ( id , ) )
   IIIii1Ii . commit ( )
   IIIii1Ii . close ( )
  except :
   pass
 else :
  action = Iiooo
  try :
   id = id . split ( '-' ) [ 0 ]
   I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( base ) ) )
   if 59 - 59: oooOoO * IiII1IiI / IiII1IiI + II % ii1I1ii1IiIi1 % IIII
   ooO000oOo00 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2Rvd24ucGhwP2lkPSVzJnR5cGU9JXM=' ) ) % ( I11iIiIIi , id , type )
   I1iiI1I ( ooO000oOo00 )
   if 32 - 32: IIII / Ii1I . IIII - IiII1i1I
   IIIii1Ii = sqlite3 . connect ( base )
   OO0o = IIIii1Ii . cursor ( )
   if type == 'series' :
    if 53 - 53: oOO % iIi11 % I1IiI1III11i * IIoooO0ooO0oo - oooOoO % II
    OO0o . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHNlcmllcyBzZXQgZG93bj1kb3duKzEgd2hlcmUgc2VyaWVfaWQgPSA_' ) , ( id , ) )
   else :
    if 44 - 44: o00oO0oo0O0O0 % Ii1I . iIi11
    if 4 - 4: IiII1IiI . IIoooO0ooO0oo . IiII1i1I - II + II * i1iI1
    OO0o . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHBlbGlzIHNldCBkb3duPWRvd24rMSB3aGVyZSBwZWxpX2lkID0gPw==' ) , ( id , ) )
   IIIii1Ii . commit ( )
   IIIii1Ii . close ( )
  except :
   pass
 IiIiI = ser . split ( ' ' )
 if not IiIiI :
  Oo0oOoOOO00o = 'Video en preparaci\xc3\xb3n'
  ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
  Ii1iI = xbmcgui . Dialog ( )
  Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
 for O00Ooo0o0OO in xrange ( len ( IiIiI ) ) :
  Ii1 = oo0o ( IiIiI [ O00Ooo0o0OO ] )
  OO = Ii1IIiI11iI1 ( Ii1 , False )
  if 59 - 59: IIoooO0ooO0oo - OOoOoO0o0o0OO * ii1I1ii1IiIi1 + ii1I1ii1IiIi1 * IIII * IIoooO0ooO0oo
  if 14 - 14: II . ooOooO0OOO * Ii1I * IIII
  IIIii1I1ii = base64 . urlsafe_b64decode ( titulo )
  if 42 - 42: oOO . OOO / IiII1IiI % IIoooO0ooO0oo
  if 7 - 7: oo / Ii - OOO
  if 25 - 25: IIoooO0ooO0oo . oOO / ooOooO0OOO / IIII
  if 95 - 95: oOO / II * ii1I1ii1IiIi1 - oo + IiII1IiI
  if 22 - 22: iiIIi1i1Iii
  if 87 - 87: OOO
  if 91 - 91: o00oO0oo0O0O0 + iiIIi1i1Iii - Ii - ii1I1ii1IiIi1 * I1IiI1III11i * ooOooO0OOO
  if 51 - 51: ii1I1ii1IiIi1 + IiII1IiI + oOO . I1 * OOoOoO0o0o0OO
  if 87 - 87: OOoOoO0o0o0OO * ooOooO0OOO % IIoooO0ooO0oo
  if OO == 'kb' or OO == 'dk' :
   if OO == 'kb' :
    OOo000OOoo00O = 'k-bagi.com'
    oo000OoO00 = 'Kabagi'
   else :
    OOo000OOoo00O = 'diskokosmiko.mx'
    oo000OoO00 = 'Diskokosmico'
   try :
    iI = I1Ii1IiIIiI ( OOo000OOoo00O , Ii1 , base )
    if iI == '' and O00Ooo0o0OO == len ( IiIiI ) - 1 :
     Oo0oOoOOO00o = 'El enlace ya no existe'
     ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
     break
    elif iI . endswith ( 'NoLogin' ) and O00Ooo0o0OO == len ( IiIiI ) - 1 :
     xbmcgui . Dialog ( ) . notification ( 'Palantir' , '%s: Usuario (%s) y Contraseña incorrectas' % ( oo000OoO00 , iI . split ( '##' ) [ 0 ] ) , xbmcgui . NOTIFICATION_WARNING , 8000 )
     break
    elif not iI . endswith ( 'NoLogin' ) :
     action ( IIIii1I1ii , I1Ii1IiIIiI ( OOo000OOoo00O , Ii1 , base ) )
     break
   except HTTPError :
    if O00Ooo0o0OO == len ( IiIiI ) - 1 :
     Oo0oOoOOO00o = 'El servidor %s parece caido, intentalo mas tarde' % OOo000OOoo00O
     ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
     import traceback
     traceback . print_exc ( file = sys . stdout )
   except Exception :
    if O00Ooo0o0OO == len ( IiIiI ) - 1 :
     Oo0oOoOOO00o = 'Error con servidor %s, revisa conexion/dominio' % OOo000OOoo00O
     ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
     import traceback
     traceback . print_exc ( file = sys . stdout )
  elif OO == 'dk' :
   try :
    iI = Oo00OooO ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , Ii1 )
    if iI == '' and O00Ooo0o0OO == len ( IiIiI ) - 1 :
     Oo0oOoOOO00o = 'El enlace ya no existe'
     ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
     break
    elif iI != '' :
     action ( IIIii1I1ii , iI )
     break
   except HTTPError :
    if O00Ooo0o0OO == len ( IiIiI ) - 1 :
     Oo0oOoOOO00o = 'El servidor %s parece caido, intentalo mas tarde' % 'diskokosmico'
     ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
   except Exception :
    if O00Ooo0o0OO == len ( IiIiI ) - 1 :
     Oo0oOoOOO00o = 'Error con servidor %s, revisa conexion/dominio' % 'diskokosmico'
     ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
  elif OO == 're' or OO == 'yt' or OO == 'standard' :
   if OO == 'yt' :
    iI = Oo0o0 ( Ii1 )
   else :
    iI = Ii1
   action ( IIIii1I1ii , iI )
   break
  elif OO == 'gloria' :
   iI = OOoo ( Ii1 )
   if iI != None :
    action ( IIIii1I1ii , iI )
   else :
    Oo0oOoOOO00o = 'Error con servidor %s, revisa conexion/dominio' % 'gloria.tv'
    ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
   break
  elif OO == 'sc' :
   ooO000oOo00 = Ii1
   try :
    iiII = I1iiI1I ( Ii1 )
    if '<h1>File Not Found</h1>' in iiII or '<h1>Archivo no encontrado</h1>' in iiII or iiII == 'Not Found' :
     if O00Ooo0o0OO == len ( IiIiI ) - 1 :
      Oo0oOoOOO00o = 'El enlace ya no existe'
      ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
      xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
      Ii1iI = xbmcgui . Dialog ( )
      Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
    else :
     iI = re . findall ( 'file\\: "([^"]+)"' , iiII , flags = re . DOTALL )
     if not iI :
      oOO0oooo = ''
      O00o00o00O0 = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , iiII , flags = re . DOTALL )
      for o00O0 , IiOOO0O0OO0OO0O in O00o00o00O0 :
       oOO0oooo += o00O0 + '=' + IiOOO0O0OO0OO0O + '&'
       if 69 - 69: oooOoO / IiII1IiI * I1 - I1 . ii1I1ii1IiIi1 - o00oO0oo0O0O0
      oOO0oooo = oOO0oooo . replace ( 'op=download1' , 'op=download2' )
      iiII = I1iiI1I ( ooO000oOo00 , post = oOO0oooo )
      if 'id="justanotice"' in iiII :
       return [ ]
      iI = re . findall ( 'file\\: "([^"]+)"' , iiII , flags = re . DOTALL )
     try :
      action ( IIIii1I1ii , iI [ 0 ] )
      break
     except :
      pass
   except HTTPError :
    if O00Ooo0o0OO == len ( IiIiI ) - 1 :
     Oo0oOoOOO00o = 'El servidor %s parece caido, intentalo mas tarde' % 'streamcloud'
     ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
   except Exception :
    if O00Ooo0o0OO == len ( IiIiI ) - 1 :
     Oo0oOoOOO00o = 'Error con servidor %s, revisa conexion/dominio' % 'streamcloud'
     ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
     if 40 - 40: IIII * oo - I1IiI1III11i . I1IiI1III11i
  elif OO == 'tk' :
   ooO000oOo00 = Ii1
   I1i11II = dict ( )
   I1i11II [
 "User-Agent" ] = "Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3163.100 Safari/537.36"
   I1i11II [
 "Accept" ] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
   I1i11II [ "Accept-Language" ] = "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3"
   I1i11II [ "Accept-Charset" ] = "UTF-8"
   I1i11II [ "Accept-Encoding" ] = "gzip"
   if 'bb' in params and 'mm' in params :
    iI = '%s&bb=%s&mm=%s|User-Agent=%s' % ( ooO000oOo00 , params [ 'bb' ] , params [ 'mm' ] , I1i11II )
   else :
    iI = '%s|User-Agent=%s' % ( ooO000oOo00 , I1i11II )
   try :
    IiIiIi1I1 = xbmcgui . ListItem ( IIIii1I1ii )
    IiIiIi1I1 . setPath ( iI )
    xbmcplugin . setResolvedUrl ( Oo0Oo0 , True , IiIiIi1I1 )
   except :
    Oo0oOoOOO00o = 'Error con servidor %s, revisa conexion/dominio' % 'tk'
    ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   try :
    import urlresolver
    try :
     iI = urlresolver . resolve ( Ii1 )
     if iI == False :
      oOOOo00000O00ooo = xbmcaddon . Addon ( id = "script.module.urlresolver" )
      Oo0oOoOOO00o = 'Servidor no soportado o con geo. script.module.urlresolver %s ' % oOOOo00000O00ooo . getAddonInfo (
 'version' )
      ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
      xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
      Ii1iI = xbmcgui . Dialog ( )
      Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 10000 )
     else :
      action ( IIIii1I1ii , iI )
    except :
     import traceback
     traceback . print_exc ( file = sys . stdout )
     Oo0oOoOOO00o = 'Posible link caido o problemas Geo.'
     ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 7000 )
   except :
    traceback . print_exc ( file = sys . stdout )
    Oo0oOoOOO00o = 'Addon script.module.urlresolver no encontrado'
    ooO = xbmcgui . ListItem ( Oo0oOoOOO00o , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( Oo0Oo0 , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 7000 )
    if 86 - 86: Ii1I
    if 66 - 66: IIII . II / II
def i1i1iIi1 ( bas , data ) :
 i1IiII1III1iI = data . split ( '.' )
 if i1IiII1III1iI [ 0 ] == 'cp' :
  i1IiII1III1iI = I1Ii1IiIIiI ( base64 . urlsafe_b64decode ( 'Y29waWFwb3AuY29t' ) , i1IiII1III1iI [ 1 ] , bas )
 elif i1IiII1III1iI [ 0 ] == 'dk' :
  i1IiII1III1iI = Oo00OooO ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , i1IiII1III1iI [ 1 ] )
 else :
  if 29 - 29: o00oO0oo0O0O0 % o00oO0oo0O0O0 % o00oO0oo0O0O0
  i1IiII1III1iI = base64 . urlsafe_b64decode ( 'JXMvbW9yaWEuY21w' ) % data
 data = I1iiI1I ( i1IiII1III1iI )
 try :
  data = zlib . decompress ( data )
 except :
  xbmc . log ( '[addon.Palantir] Error decrypt bd %s' % ( data ) )
  pass
 iiIii1IIi1I = open ( bas , 'wb' )
 iiIii1IIi1I . write ( data )
 iiIii1IIi1I . close ( )
 try :
  IIIii1Ii = sqlite3 . connect ( bas )
  OO0o = IIIii1Ii . cursor ( )
  if 18 - 18: IiII1i1I * OOoOoO0o0o0OO + oOO * I1IiI1III11i . iIi11 - IIoooO0ooO0oo
  OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IHZlcnNpb24sIChzZWxlY3QgY291bnQoKikgZnJvbSAoc2VsZWN0IGxpbmsgZnJvbSBzZXJpZXMgd2hlcmUgbGluayB1bmlvbiBzZWxlY3QgbGluayBmcm9tIHBlbGlzKSkgZnJvbSB2ZXJzaW9u' ) )
  oOo = OO0o . fetchone ( )
  IIIii1Ii . close ( )
  Oo0oOoOOO00o = 'Vers. %s (Más de %s contenidos diferentes)' % ( oOo [ 0 ] , oOo [ 1 ] )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_INFO , 5000 )
 except DatabaseError as o0o0000O0 :
  if 75 - 75: II - ooOooO0OOO - iiIIi1i1Iii . o00oO0oo0O0O0 - II - ii1I1ii1IiIi1
  if os . path . isfile ( bas ) :
   os . remove ( bas )
   if 11 - 11: I1IiI1III11i - ii1I1ii1IiIi1 * oooOoO % Ii
  raise o0o0000O0
  if 29 - 29: iiIIi1i1Iii + Ii1I - oooOoO / I1IiI1III11i + Ii - oOO
def iII1iIIiIi11I ( bas , provider ) :
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 if 29 - 29: oOO
 OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IGNyZWRlbnRpYWxzIGZyb20gdmVyc2lvbg==' ) )
 oOo = OO0o . fetchone ( )
 IIIii1Ii . close ( )
 if oOo [ 0 ] :
  O0oo00 = oOo [ 0 ] . split ( '##' )
  for O00Ooo0o0OO in xrange ( len ( O0oo00 ) / 3 ) :
   if O0oo00 [ O00Ooo0o0OO * 3 ] == provider :
    if provider == 'k-bagi.com' :
     provider = 'kbg'
    elif provider == 'kbagi.com' :
     provider = 'kbg'
    else :
     provider = 'dk'
    return [ __settings__ . getSetting ( '%sUserName' % provider ) or O0oo00 [ O00Ooo0o0OO * 3 + 1 ] ,
 __settings__ . getSetting ( '%sPassword' % provider ) or O0oo00 [ O00Ooo0o0OO * 3 + 2 ] ]
    if 22 - 22: oooOoO * OOO / Ii1I / I1 / IiII1IiI
 return [ 'NoBDNoUser' ] * 2
 if 45 - 45: ooOooO0OOO + IiII1i1I
 if 83 - 83: Ii1I % Ii1I - ooOooO0OOO - Ii1I + Ii1I + i1iI1
def I11111IiiIII1 ( bas ) :
 I11iIiIIi = I111I11I11111 ( bas )
 if I11iIiIIi == '' :
  I11iIiIIi = OOo0000oO ( )
 I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I11iIiIIi ) )
 import xbmcaddon
 IiII11i = xbmcaddon . Addon ( )
 ooO0 = xbmc . translatePath ( IiII11i . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
 if os . path . isfile ( bas ) :
  try :
   if 47 - 47: OOoOoO0o0o0OO - IiII1i1I . Ii - OOoOoO0o0o0OO . IIoooO0ooO0oo + IIII
   oOo = I1iiI1I ( base64 . urlsafe_b64decode ( 'JXMvYmFscm9nLmluZm8=' ) % I11iIiIIi )
   if 35 - 35: Ii * IIoooO0ooO0oo % oooOoO . oooOoO
   IiOoo00o0oo = oOo . split ( ' ' )
   try :
    IIIii1Ii = sqlite3 . connect ( bas )
    OO0o = IIIii1Ii . cursor ( )
    if 64 - 64: iIi11 + Ii . oOO - OOO . IIoooO0ooO0oo
    OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIHZlcnNpb25fYWRkb24sIGRhdGEgZnJvbSB2ZXJzaW9u' ) )
    oO = OO0o . fetchone ( )
    IIIii1Ii . close ( )
    O0oOO0OoO0O = str ( oO [ 0 ] )
    if int ( O0oOO0OoO0O ) < int ( IiOoo00o0oo [ 0 ] ) :
     if 77 - 77: iIi11 % IIoooO0ooO0oo * I1IiI1III11i * IIII - II - OOoOoO0o0o0OO
     i1i1iIi1 ( bas , oo0o ( IiOoo00o0oo [ 1 ] . strip ( ) ) )
     IIIii1Ii = sqlite3 . connect ( bas )
     OO0o = IIIii1Ii . cursor ( )
     if 96 - 96: o00oO0oo0O0O0 / oOO * oooOoO - Ii
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG1lbnNhamVfdXBkYXRlLCBub3RpZmljYWNpb25fdXBkYXRlIGZyb20gdmVyc2lvbg==' ) )
     oO = OO0o . fetchone ( )
     IIIii1Ii . close ( )
     if oO [ 1 ] :
      xbmcgui . Dialog ( ) . notification ( 'Palantir' , oO [ 1 ] , xbmcgui . NOTIFICATION_INFO , 9000 )
     if oO [ 0 ] :
      xbmcgui . Dialog ( ) . ok ( 'Palantir' , oO [ 0 ] )
   except :
    i1i1iIi1 ( bas , oo0o ( IiOoo00o0oo [ 1 ] . strip ( ) ) )
  except ( HTTPError , URLError ) as o0o0000O0 :
   traceback . print_exc ( file = sys . stdout )
   Oo0oOoOOO00o = 'El plugin no puede ser actualizado'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_WARNING , 5000 )
 else :
  try :
   if 6 - 6: o00oO0oo0O0O0 * IiII1IiI + oo % II * ooOooO0OOO % i1iI1
   if 35 - 35: oOO / II
   oOo = I1iiI1I ( base64 . urlsafe_b64decode ( 'JXMvYmFscm9nLmluZm8=' ) % I11iIiIIi )
   IiOoo00o0oo = oOo . split ( ' ' )
   i1i1iIi1 ( bas , oo0o ( IiOoo00o0oo [ 1 ] . strip ( ) ) )
   IIIii1Ii = sqlite3 . connect ( bas )
   OO0o = IIIii1Ii . cursor ( )
   if 83 - 83: I1
   OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG1lbnNhamVfaW5pY2lhbCBmcm9tIHZlcnNpb24=' ) )
   oO = OO0o . fetchone ( )
   IIIii1Ii . close ( )
   if oO [ 0 ] :
    xbmcgui . Dialog ( ) . ok ( 'Palantir' , oO [ 0 ] )
  except HTTPError :
   Oo0oOoOOO00o = 'El plugin no se puede cargar'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , Oo0oOoOOO00o , xbmcgui . NOTIFICATION_ERROR , 5000 )
   xbmc . executebuiltin ( 'Action(Back)' )
   if 19 - 19: IIII % II - iIi11 + oOO . oo * Ii1I
 if os . path . isfile ( base64 . urlsafe_b64decode ( 'JXMvaXRoaWwucHk=' ) % ooO0 ) :
  os . remove ( base64 . urlsafe_b64decode ( 'JXMvaXRoaWwucHk=' ) % ooO0 )
  if 28 - 28: iIi11 - oOO
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 if 21 - 21: IIoooO0ooO0oo . IiII1i1I + OOoOoO0o0o0OO
 OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIHZlcnNpb25fYWRkb24sIGRhdGEgZnJvbSB2ZXJzaW9u' ) )
 oO = OO0o . fetchone ( )
 IIIii1Ii . close ( )
 i111Ii1ii11 = IiII11i . getAddonInfo ( 'version' ) . decode ( 'utf-8' )
 if int ( i111Ii1ii11 . replace ( '.' , '' ) ) < oO [ 1 ] :
  i1i1II11I = oO [ 2 ] . split ( ' ' )
  for O00Ooo0o0OO , O0O in zip ( i1i1II11I [ 0 : : 2 ] , i1i1II11I [ 1 : : 2 ] ) :
   iiII = zlib . decompress ( base64 . b64decode ( O0O ) )
   iiIii1IIi1I = open ( '%s/%s' % ( ooO0 , base64 . b64decode ( O00Ooo0o0OO ) ) , 'wb' )
   iiIii1IIi1I . write ( iiII )
   iiIii1IIi1I . close ( )
   if 74 - 74: Ii1I / oOO * Ii * OOoOoO0o0o0OO + oo . iiIIi1i1Iii
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')